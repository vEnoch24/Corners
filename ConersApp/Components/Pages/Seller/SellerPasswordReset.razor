@page "/seller-password-reset"
@using BackendClassLibrary.Dto
@using BackendClassLibrary.Helper
@using BackendClassLibrary.RequestPayload
@using System.Text

@inject ISnackbar Snackbar;
@inject NavigationManager navigationManager;

<MudItem Style="margin-bottom: 20px">
    <MudText Sty Typo="Typo.h3" Align="Align.Center">
        <b>Set new password</b>
    </MudText>
    <MudText Style="margin-top: 2px" Typo="Typo.body2" Align="Align.Center">
        We sent a password reset code to <b>@Email</b>
    </MudText>
</MudItem>


<EditForm Model="@passwordReset" OnValidSubmit="ResetPasswordAsync">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Style="margin-top: 10px">
            
        <MudItem xs="12" sm="8">
            <Animate Auto Animation="Animations.FadeDown" DelayMilliseconds="100" >
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudTextField Label="Reset Token" Variant="Variant.Outlined" Class="mt-3"
                                      @bind-Value="passwordReset.Token" HelperText="Enter Token sent to the above email address" For="@(() => passwordReset.Token)" />
                        <MudTextField Label="New Password" Variant="Variant.Outlined" Class="mt-3"
                                      @bind-Value="passwordReset.Password" For="@(() => passwordReset.Password)"
                                      InputType="@PasswordInput" Adornment="Adornment.End"
                                      AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ShowPasswordClick" AdornmentAriaLabel="Show Password" />
                        <MudTextField Label="Confirm New Password" Variant="Variant.Outlined" Class="mt-3"
                                      @bind-Value="passwordReset.confirmPassword" For="@(() => passwordReset.confirmPassword)" 
                                      InputType="@PasswordInput" Adornment="Adornment.End"
                                      AdornmentIcon="@PasswordInputIcon"
                                      OnAdornmentClick="ShowPasswordClick" AdornmentAriaLabel="Show Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Href="/seller-login" Variant="Variant.Text" Color="Color.Primary">Return to login</MudButton>

                        @if (!isBusy)
                        {
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Class="ml-auto">
                                Reset Password
                            </MudButton>
                        }
                        else
                        {
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Class="ml-auto"
                                       Disabled=true>
                                <MudProgressCircular Color="Color.Default" Size="Size.Small" Style="margin-right: 8px" Indeterminate="true" />
                                ResetPassword
                            </MudButton>
                        }

                    </MudCardActions>
                </MudCard>
            </Animate>
        </MudItem>
           
    </MudGrid>
</EditForm>


@code {
    private ResetPasswordRequest passwordReset = new();
    private string Email;

    private string _baseUrl;
    private string? errorMessage;
    private bool isBusy = false;

    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPasswordClick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void SetBaseUrl()
    {
        if (DeviceInfo.Platform == DevicePlatform.Android)
        {
            _baseUrl = "http://10.0.2.2:44365/";
        }
        else
        {
            _baseUrl = "https://localhost:44365/";
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Email = await SecureStorage.GetAsync("UserEmail");

    }

    private async Task ResetPasswordAsync()
    {
        SetBaseUrl();

        try
        {
            isBusy = true;

            using (var client = new HttpClient())
            {
                var serializedStr = Newtonsoft.Json.JsonConvert.SerializeObject(passwordReset);
                var response = await client.PatchAsync($"{_baseUrl}api/Account/reset-password", new StringContent(serializedStr, Encoding.UTF8, "application/json"));

                if(response.IsSuccessStatusCode)
                {
                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.ShowTransitionDuration = 100;
                    Snackbar.Add("password reset successful", Severity.Success);

                    SecureStorage.Remove("UserEmail");
                    navigationManager.NavigateTo("/login");
                }
                else
                {
                    isBusy = false;
                    errorMessage = await response.Content.ReadAsStringAsync();

                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.ShowTransitionDuration = 100;
                    Snackbar.Add(errorMessage, Severity.Error);

                    //await App.Current.MainPage.DisplayAlert("Oops", errorMessage, "OK");
                }
            }
        }
        catch(Exception ex)
        {
            isBusy = false;
            errorMessage = ex.Message;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.ShowTransitionDuration = 100;
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
}
