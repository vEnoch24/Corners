@page "/seller-pre-password-reset"
@using BackendClassLibrary.Dto
@using BackendClassLibrary.Helper
@using BackendClassLibrary.RequestPayload
@using System.Text

@inject ISnackbar Snackbar;
@inject NavigationManager navigationManager;

<MudItem Style="margin-bottom: 20px">
    <MudText Sty Typo="Typo.h3" Align="Align.Center">
        <b>Forgot Password?</b>
    </MudText>
    <MudText Style="margin-top: 12px" Typo="Typo.body2" Align="Align.Center">
        No worries, provide your account email address we will send you a reset token
    </MudText>
</MudItem>


<EditForm Model="@forogtPassword" OnValidSubmit="ForgotPassword">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Style="margin-top: 10px">

        <MudItem xs="12" sm="8">
            <Animate Auto Animation="Animations.FadeUp" DelayMilliseconds="100" >
            <MudCard Elevation="3">
                <MudCardContent>
                    <MudTextField Label="Email" Variant="Variant.Outlined" Class="mt-3"
                                    @bind-Value="forogtPassword.Email" HelperText="Enter account email to be reset" For="@(() => forogtPassword.Email)" />
                      
                </MudCardContent>
                <MudCardActions>
                        <MudButton StartIcon="@Icons.Material.Filled.ArrowBack" Href="/seller-login" Variant="Variant.Text" Color="Color.Primary">
                            Return to login
                        </MudButton>

                    @if (!isBusy)
                    {
                        <MudButton ButtonType="ButtonType.Submit"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    Class="ml-auto">
                            Reset Password
                        </MudButton>
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    Class="ml-auto"
                                    Disabled=true>
                            <MudProgressCircular Color="Color.Default" Size="Size.Small" Style="margin-right: 8px" Indeterminate="true" />
                            Reset Password
                        </MudButton>
                    }

                </MudCardActions>
            </MudCard>
            </Animate>
        </MudItem>      
    </MudGrid>
</EditForm>


<MudItem Style="margin-top: 50px">
   
    @* <MudText Sty Typo="Typo.h3" Align="Align.Center">
        <b>ForgotPassword?</b>
    </MudText>
    <MudText Typo="Typo.body2" Align="Align.Center">
        No worries we will send you a reset token
    </MudText> *@
</MudItem>

@code {
    private ForgotPasswordRequest forogtPassword = new();

    private string _baseUrl;
    private string? errorMessage;
    private bool isBusy = false;


    private void SetBaseUrl()
    {
        if (DeviceInfo.Platform == DevicePlatform.Android)
        {
            _baseUrl = "http://10.0.2.2:44365/";
        }
        else
        {
            _baseUrl = "https://localhost:44365/";
        }
    }


    private async Task ForgotPassword()
    {
        SetBaseUrl();
        //navigationManager.NavigateTo("/password-reset");

        try
        {
            isBusy = true;

            if (!string.IsNullOrWhiteSpace(forogtPassword.Email))
            {
                using (var client = new HttpClient())
                {
                    var email = forogtPassword.Email;

                    // Construct an object to represent the email request
                    var emailPayload = new { email };

                    var serializedStr = Newtonsoft.Json.JsonConvert.SerializeObject(emailPayload);

                    var response = await client.PatchAsync($"{_baseUrl}api/BusinessAccount/forgot-password", new StringContent(serializedStr, Encoding.UTF8, "application/json"));

                    if (response.IsSuccessStatusCode)
                    {
                        var contentStr = await response.Content.ReadAsStringAsync();
                        var authResponse = JsonConverter.Deserialize<PasswordResetDto>(contentStr);

                        // var serialized = JsonConverter.Serialize(authResponse);
                        // await SecureStorage.SetAsync("PasswordResetToken", authResponse.PasswordResetToken);
                        await SecureStorage.SetAsync("UserEmail", email);
                        navigationManager.NavigateTo("/seller-password-reset");
                    }
                    else
                    {
                        isBusy = false;
                        errorMessage = await response.Content.ReadAsStringAsync();

                        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                        Snackbar.Configuration.ShowTransitionDuration = 100;
                        Snackbar.Add(errorMessage, Severity.Error);

                        //await App.Current.MainPage.DisplayAlert("Oops", errorMessage, "OK");
                    }
                }
            }
            else
            {
                isBusy = false;
                errorMessage = "Email field cannot be empty";

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Configuration.ShowTransitionDuration = 100;
                Snackbar.Add(errorMessage, Severity.Error);
            }

        }
        catch (Exception ex)
        {
            isBusy = false;
            errorMessage = ex.Message;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.ShowTransitionDuration = 100;
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
}
