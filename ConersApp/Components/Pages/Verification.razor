@page "/verification"

@using BackendClassLibrary.Dto
@using BackendClassLibrary.Helper
@using BackendClassLibrary.Models
@using ConersApp.State
@using MudBlazor
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Inputs
@using System.Text

@inject ISnackbar Snackbar;

@* 
<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
</MudContainer> *@

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <SfOtpInput Value="@otp" Length="4" Type="OtpInputType.Number" CssClass=""></SfOtpInput>
    </MudPaper>
</MudContainer>


@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private VerifyModel verifyModel { get; set; } = new();

    private string _baseUrl = "https://localhost:7259/";
    private string? errorMessage;
    private bool isBusy = false;
    private string otp;

    protected async override Task OnInitializedAsync()
    {
        // var authStateJson = await SecureStorage.GetAsync(AuthenticationState.AuthStoreKey);

        // if (!string.IsNullOrWhiteSpace(authStateJson))
        // {
        //     authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);            
        // }
    }

    private async Task Verify()
    {
        try
        {
            var authStateJson = await SecureStorage.GetAsync(AuthenticationState.AuthStoreKey);
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);

            var model = new VerifyModel()
            {
                Email = authState.User.Email,
                Id = authState.User.Id,
                Otp = otp
            };

            using (var client = new HttpClient())
            {
                var serializedStr = Newtonsoft.Json.JsonConvert.SerializeObject(model);
                var response = await client.PatchAsync($"{_baseUrl}api/Account/verify-otp", new StringContent(serializedStr, Encoding.UTF8, "application/json"));

                if(response.IsSuccessStatusCode)
                {
                    AuthenticationState.LoadState(authState);
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.ShowTransitionDuration = 100;
            Snackbar.Add(errorMessage, Severity.Error);
        }

    }


}
