@page "/login"

@using BackendClassLibrary.Dto;
@using BackendClassLibrary.Models;
@using BackendClassLibrary.Helper;
@using System.Text;
@using ConersApp.State;

@inject ISnackbar Snackbar;

<MudItem Style="margin-bottom: 20px">
    <MudText Sty Typo="Typo.h3" Align="Align.Center">
        <b>Welcome back</b>
    </MudText>
    <MudText Typo="Typo.body2" Align="Align.Center">
        Log in to continue to Catalogue.
    </MudText>
    <MudText Typo="Typo.h5" Align="Align.Center">
        OR
    </MudText>
    <MudPaper Elevation="5">
        <MudButton Href="/"
                Variant="Variant.Outlined" 
                Color="Color.Primary" 
                FullWidth="true">
            Become a seller
        </MudButton>
    </MudPaper>
</MudItem>



<EditForm Model="@loginModel" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <MudGrid Style="margin-top: 70px">
        
             <MudItem xs="12" sm="7">
                 <Animate Auto Animation="Animations.FadeRight" DelayMilliseconds="100" >
                    <MudCard Elevation="5">
                        <MudCardContent>
                            <MudTextField Label="Email" Variant="Variant.Outlined" Class="mt-3"
                                            @bind-Value="loginModel.Email" For="@(() => loginModel.Email)" />
                            <MudTextField Label="Password" Variant="Variant.Outlined" Class="mt-3"
                                            @bind-Value="loginModel.Password" For="@(() => loginModel.Password)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            @if(!isBusy)
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                            }
                            else{
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="true" Class="ml-auto">
                                    <MudProgressCircular Color="Color.Default" Size="Size.Small" Style="margin-right: 8px" Indeterminate="true" />
                                    Login
                                </MudButton>
                            }
                    
                        </MudCardActions>
                    </MudCard>
                </Animate>
            </MudItem>
        
        <MudItem xs="12" sm="5">
            <Animate Auto Animation="Animations.FadeLeft" DelayMilliseconds="100">
                <MudPaper Elevation="5" Class="pa-4 mud-height-full">
                    <MudText>Don't have an account?</MudText>
                    <MudButton Href="/register" Variant="Variant.Filled" Color="Color.Secondary" Class="mt-3" FullWidth="true" StartIcon="@Icons.Material.Filled.PersonAdd">
                        Register
                    </MudButton>
                    <MudDivider Class="my-2" /> 
                    
                    <MudText Align="Align.Center">OR</MudText>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2" FullWidth="true" >
                        <MudIcon Icon="@Icons.Custom.Brands.Google" Class="mr-2" /> Continue with Google
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2" FullWidth="true" >
                        <MudIcon Icon="@Icons.Custom.Brands.Microsoft" Class="mr-2" /> Continue with Microsoft
                    </MudButton>

                </MudPaper>
            </Animate>
            
        </MudItem>
       
       
    </MudGrid>
</EditForm>


<MudItem Style="margin-bottom: 20px">
    
    
</MudItem>





@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }

    private LoginModel loginModel { get; set; } = new();
    private string _baseUrl;
    private string? errorMessage;
    private bool isBusy = false;


    private void SetBaseUrl()
    {
        if(DeviceInfo.Platform == DevicePlatform.Android)
        {
            _baseUrl = "http://10.0.2.2:7259/";
        }
        else
        {
            _baseUrl = "https://localhost:7259/";
        }
    }

    private async Task LoginAsync()
    {
        try
        {
            SetBaseUrl();

            isBusy = true;
            using (var client = new HttpClient())
            {
                var serializedStr = Newtonsoft.Json.JsonConvert.SerializeObject(loginModel);
                var response = await client.PostAsync($"{_baseUrl}api/Account/login", new StringContent(serializedStr, Encoding.UTF8, "application/json"));

                if (response.IsSuccessStatusCode)
                {
                    var contentStr = await response.Content.ReadAsStringAsync();
                    var authResponse = JsonConverter.Deserialize<AuthResponseDto>(contentStr);

                    var serialized = JsonConverter.Serialize(authResponse);
                    await SecureStorage.SetAsync(AuthenticationState.AuthStoreKey, serialized);

                    AuthenticationState.LoadState(authResponse);
                }
                else
                {
                    isBusy = false;
                    errorMessage = await response.Content.ReadAsStringAsync();

                    Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                    Snackbar.Configuration.ShowTransitionDuration = 100;
                    Snackbar.Add(errorMessage, Severity.Error);
                    
                    //await App.Current.MainPage.DisplayAlert("Oops", errorMessage, "OK"); 
                }
            }
        }
        catch(Exception ex)
        {
            isBusy = false;
            errorMessage = ex.Message;

            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Configuration.ShowTransitionDuration = 100;
            Snackbar.Add(errorMessage, Severity.Error);

            //await App.Current.MainPage.DisplayAlert("Oops", errorMessage, "OK");
        }

    }


}
