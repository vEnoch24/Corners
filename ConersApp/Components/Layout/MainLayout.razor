@using BackendClassLibrary.Dto;
@using BackendClassLibrary.Helper;
@using System.ComponentModel;
@using ConersApp.State;

@implements IDisposable
@inject NavigationManager NavigationManager

@inherits LayoutComponentBase

@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div> *@


<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudThemeProvider />
<CascadingValue Value="AuthenticationState" Name="AuthenticationState">
    <MudLayout>
        <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @ref="@_mudThemeProvider" Theme="@_customTheme" />
        
            <MudBreakpointProvider @ref="@breakpointProvider" OnBreakpointChanged="OnBreakpointChanged">
                @if(_isMobileView)
                {
                     <MudAppBar class="blurred-appbar" Dense="false" Elevation="0">
                          <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                         @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
                        <MudText Typo="Typo.h4" Class="mt-1">Corners</MudText>
                        <MudSpacer />

                       <MudIconButton Icon="@Icons.Material.Filled.Search" />
                        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@
                        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Outlined.DarkMode : Icons.Material.Outlined.LightMode)"
                                   Color="Color.Default"
                                   Class="ma-4"
                                   @onclick="ToggleDarkMode" />
                        <MudMenu>
                            <ActivatorContent>
                                <MudAvatar>
                                    @* <MudImage Src="images/toiletvisit.jpg" /> *@
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                </MudAvatar>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="Logout">LogOut</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </MudAppBar>
                }
                else
                {
                    <MudAppBar class="blurred-appbar" Dense="false" Elevation="0">
                         @* <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" /> *@
                        <MudText Typo="Typo.h4" Class="mt-1">Corners</MudText>
                        <MudSpacer />

                       <MudTextField @bind-Value="Search" 
                          Label="Search" 
                          Variant="Variant.Outlined" 
                          Adornment="Adornment.End" 
                          AdornmentIcon="@Icons.Material.Filled.Search" 
                          AdornmentColor="Color.Secondary"
                          Dense="true"
                          Margin="Margin.Dense"
                          Class="custom-textfield" />
                        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@
                        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Outlined.DarkMode : Icons.Material.Outlined.LightMode)"
                                   Color="Color.Default"
                                   Class="ma-4"
                                   @onclick="ToggleDarkMode" />
                        <MudMenu>
                            <ActivatorContent>
                                <MudAvatar>
                                    @* <MudImage Src="images/toiletvisit.jpg" /> *@
                                    <MudIcon Icon="@Icons.Material.Filled.Person" />
                                </MudAvatar>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                                <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="Logout">LogOut</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </MudAppBar>
                }
            </MudBreakpointProvider>


        @*<MudDrawerContainer Class="mud-height-full">

        </MudDrawerContainer>*@
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always"
                   Breakpoint="Breakpoint.Md"
                   Variant="@DrawerVariant.Responsive" OpenMiniOnHover="false" Elevation="0">
            <MudNavMenu class="nav-menu" Rounded="true" Margin="Margin.Normal" Color="Color.Success" Bordered="true">

                <MudNavLink Href="/seller-dashboard" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" class="nav-link-box-shadow">DASHBOARD</MudNavLink>
                <MudNavLink Href="/products" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingBag" class="nav-link-box-shadow">PRODUCTS</MudNavLink>
                @* <MudNavLink Href="/order" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCart" class="nav-link-box-shadow">Orders</MudNavLink> *@
                @* <MudNavLink Href="/checkout" Match=" NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCartCheckout" class="nav-link-box-shadow">Checkout</MudNavLink> *@
            </MudNavMenu>
            @* <NavMenu/>*@
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 20px;">
                @Body
            </MudContainer>
        </MudMainContent>

        
    </MudLayout>
</CascadingValue>

<style>
    .nav-menu {
        overflow-x: hidden;
    }

    .nav-link-box-shadow:hover {
        /* box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1), 0 4px 12px rgba(0, 0, 0, 0.1); */
        transition: all 0.2s ease-in-out;
        transform: scale(1.08);
    }

    .blurred-appbar {
        backdrop-filter: blur(10px); /* Adjust the amount of blur */
        -webkit-backdrop-filter: blur(10px); /* Safari Support */
    }
    .custom-textfield {
        font-size: 0.8rem;
        height: 30px;
        max-width: 200px;
    }
</style>

@code {
    private MudBreakpointProvider breakpointProvider;
    private bool _isMobileView;
    bool _drawerOpen = true;
    public string Search { get; set; }

    private MudTheme _theme = new();
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void OnBreakpointChanged(Breakpoint breakpoint)
    {
        _isMobileView = breakpoint <= Breakpoint.Sm;
    }

    public AuthenticationState AuthenticationState { get; set; } = new();


    MudTheme _customTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#1DB954", // Spotify Green
            Secondary = "#6A6A6A", // Dark Gray for secondary text
            Background = "#FFFFFF", // White background for light mode
                AppbarBackground = "rgba(255, 255, 255, 0.5)", // White background for the AppBar in light mode
            Surface = "#F5F5F5", // Light gray surface color for light mode
            TextPrimary = "#191414", // Black primary text color
            TextSecondary = "#6A6A6A", // Dark gray secondary text
            AppbarText = "#191414", // Black text for AppBar
            Error = "#E91429" // Error color (Spotify red)
        },

        PaletteDark = new PaletteDark()
        {
                Primary = "#1ED760", // Spotify Green
                Secondary = "#FFFFFF", // Light Gray for secondary text
                Background = "#121212", // Dark charcoal background for dark mode
                AppbarBackground = "rgba(18, 18, 18, 0.8)", // Dark background for the AppBar in dark mode
            Surface = "#282828", // Darker gray surface color for dark mode
            TextPrimary = "#FFFFFF", // White primary text color
            TextSecondary = "#B3B3B3", // Light gray secondary text
            AppbarText = "#FFFFFF", // White text for AppBar
                DrawerBackground = "#121212",
            Error = "#E91429" // Error color (Spotify red)
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "200px",
        },

        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Poppins", "Helvetica", "Arial", "sans-serif" }
            },

            H4 = new H4()
            {
                FontSize = "2rem",
                FontWeight = 900,

            }
        }
    };

    //UI
    private async Task Logout()
    {
        SecureStorage.Remove(AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            // _isDarkMode = false;
            StateHasChanged();

        }
    }

    protected async override Task OnInitializedAsync()
    {

        //var authStateJson = await JsRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);
        var authStateJson = await SecureStorage.GetAsync(AuthenticationState.AuthStoreKey);
        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);
            AuthenticationState.LoadState(authState);

            if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Buyer")
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Seller")
            {
                NavigationManager.NavigateTo("/seller-dashboard");
            }
        }

        AuthenticationState.PropertyChanged += AuthenticationStateChanged;
    }

    private void AuthenticationStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthenticationState.IsAuthenticated))
        {
            if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Buyer")
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Seller")
            {
                NavigationManager.NavigateTo("/seller-dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationState.PropertyChanged -= AuthenticationStateChanged;
    }
}