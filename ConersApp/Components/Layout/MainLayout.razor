@using BackendClassLibrary.Dto;
@using BackendClassLibrary.Helper;
@using System.ComponentModel;
@using ConersApp.State;

@implements IDisposable
@inject NavigationManager NavigationManager

@inherits LayoutComponentBase

@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div> *@


<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudThemeProvider />
<CascadingValue Value="AuthenticationState" Name="AuthenticationState">
    <MudLayout>
        <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @ref="@_mudThemeProvider" Theme="@_theme" />
        @*<MudAppBar Dense="false" Elevation="1">

        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="mt-1">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
        </MudAppBar>*@
        @*<MudDrawerContainer Class="mud-height-full">

        </MudDrawerContainer>*@
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Never"
                   Breakpoint="Breakpoint.Sm"
                   Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" Elevation="2">
            <MudDrawerHeader>

            </MudDrawerHeader>
            <MudNavMenu Rounded="true" Margin="Margin.Normal" Color="Color.Success" Bordered="true">

                <MudNavLink Href="/dashboard" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
                <MudNavLink Href="/order" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCart">Orders</MudNavLink>
                <MudNavLink Href="/checkout" Match=" NavLinkMatch.All" Icon="@Icons.Material.Filled.ShoppingCartCheckout">Checkout</MudNavLink>
            </MudNavMenu>
            @* <NavMenu/>*@
        </MudDrawer>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 20px;">
                @Body
            </MudContainer>
        </MudMainContent>

        <MudContainer>
            copyright 2024
        </MudContainer>
    </MudLayout>
</CascadingValue>


@code {
    bool _drawerOpen = false;

    private MudTheme _theme = new();
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public AuthenticationState AuthenticationState { get; set; } = new();



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //_isDarkMode = await _mudThemeProvider.GetSystemPreference();
            _isDarkMode = false;
            StateHasChanged();

        }
    }

    protected async override Task OnInitializedAsync()
    {

        //var authStateJson = await JsRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);
        var authStateJson = await SecureStorage.GetAsync(AuthenticationState.AuthStoreKey);
        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);
            AuthenticationState.LoadState(authState);

            if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Buyer")
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Seller")
            {
                NavigationManager.NavigateTo("/seller-dashboard");
            }
        }

        AuthenticationState.PropertyChanged += AuthenticationStateChanged;
    }

    private void AuthenticationStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthenticationState.IsAuthenticated))
        {
            if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Buyer")
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else if (AuthenticationState.IsAuthenticated && AuthenticationState.User.Role == "Seller")
            {
                NavigationManager.NavigateTo("/seller-dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationState.PropertyChanged -= AuthenticationStateChanged;
    }
}