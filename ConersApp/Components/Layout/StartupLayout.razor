@using BackendClassLibrary.Dto;
@using BackendClassLibrary.Helper;
@using System.ComponentModel;
@using ConersApp.State;

@implements IDisposable
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudThemeProvider />

<CascadingValue Value="AuthenticationState" Name="AuthenticationState">
    <MudLayout>
        <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @ref="@_mudThemeProvider" Theme="@_theme" />
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Medium" Style="margin-top: 20px; padding: 20px">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>


@code {
    public AuthenticationState AuthenticationState { get; set; } = new();

    private MudTheme _theme = new();
    private MudThemeProvider? _mudThemeProvider;
    private bool _isDarkMode;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();

        }
    }

    protected async override Task OnInitializedAsync()
    {
        SecureStorage.RemoveAll();
        //var authStateJson = await JsRuntime.InvokeAsync<string>("window.getFromStorage", AuthenticationState.AuthStoreKey);
        var authStateJson = await SecureStorage.GetAsync(AuthenticationState.AuthStoreKey);
        if (!string.IsNullOrWhiteSpace(authStateJson))
        {
            var authState = JsonConverter.Deserialize<AuthResponseDto>(authStateJson);
            AuthenticationState.LoadState(authState);

            if (AuthenticationState.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/dashboard");
            }
        }

        AuthenticationState.PropertyChanged += AuthenticationStateChanged;
    }

    private void AuthenticationStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(AuthenticationState.IsAuthenticated))
        {
            if (AuthenticationState.IsAuthenticated)
            {
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    public void Dispose()
    {
        AuthenticationState.PropertyChanged -= AuthenticationStateChanged;
    }

}
